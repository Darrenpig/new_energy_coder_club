终端设备（模拟）# 假设这是从传感器获取数据的函数  
def get_sensor_data():  
    # 这里应该是真实的传感器数据获取逻辑  
    # 但为了示例，我们直接返回一个模拟的数据  
    return {"temperature": 25.5, "humidity": 60.0}  
  
# 将数据发送到边缘节点  
def send_data_to_edge(data):  
    # 这里可能是通过MQTT、CoAP等协议发送数据  
    print(f"Sending data to edge: {data}")  
  
# 模拟传感器数据获取并发送  
sensor_data = get_sensor_data()  
send_data_to_edge(sensor_data)

边缘节点

# 假设这是从终端接收数据的函数（实际中可能是MQTT订阅等）  
def receive_data_from_device(data):  
    # 接收到的数据  
    print(f"Received data from device: {data}")  
    # 在这里可以进行初步的数据处理  
    processed_data = process_data(data)  
    # 将处理后的数据发送到云端  
    send_data_to_cloud(processed_data)  
  
def process_data(data):  
    # 简单的数据处理示例  
    # 实际应用中，这里可能包含更复杂的逻辑  
    return {"processed_temperature": round(data["temperature"], 1), "processed_humidity": round(data["humidity"], 1)}  
  
def send_data_to_cloud(data):  
    # 发送数据到云端的逻辑  
    print(f"Sending data to cloud: {data}")  
  
# 假设这是从某个终端接收到的数据  
received_data = {"temperature": 25.5, "humidity": 60.0}  
receive_data_from_device(received_data)

云端

# 假设这是从边缘节点接收数据的函数（实际中可能是REST API、消息队列等）  
def receive_data_from_edge(data):  
    # 接收并处理来自边缘节点的数据  
    print(f"Received data from edge: {data}")  
    # 在这里进行复杂的数据分析和存储  
    analyze_data(data)  
  
def analyze_data(data):  
    # 数据分析逻辑  
    # 例如，可以基于历史数据判断当前环境状态  
    print(f"Analyzed data: {data}")  
  
# 假设这是从边缘节点接收到的数据  
received_data_from_edge = {"processed_temperature": 25.5, "processed_humidity": 60.0}  
receive_data_from_edge(received_data_from_edge)





# terminal_device.py  
import json  
import paho.mqtt.client as mqtt  
  
# MQTT设置  
MQTT_BROKER = "localhost"  
MQTT_PORT = 1883  
MQTT_TOPIC = "sensors/data"  
  
def get_sensor_data():  
    # 模拟传感器数据  
    return {"temperature": 25.5, "humidity": 60.0}  
  
def on_connect(client, userdata, flags, rc):  
    print(f"Connected with result code {str(rc)}")  
    # 订阅主题通常放在这里，但在这个例子中我们直接发送数据  
  
def send_data_to_edge(client, data):  
    payload = json.dumps(data)  
    result = client.publish(MQTT_TOPIC, payload)  
    status = result[0]  
    if status == 0:  
        print(f"Send `{payload}` to topic `{MQTT_TOPIC}`")  
        return True  
    else:  
        print(f"Failed to send message to topic {MQTT_TOPIC}")  
        return False  
  
# 创建MQTT客户端实例  
client = mqtt.Client()  
client.on_connect = on_connect  
  
# 连接到MQTT代理  
client.connect(MQTT_BROKER, MQTT_PORT, 60)  
  
# 发送数据  
sensor_data = get_sensor_data()  
send_data_to_edge(client, sensor_data)  
  
# 保持连接，以便发送数据（在实际应用中，通常会有循环来持续发送数据）  
client.loop_forever()


# edge_node.py  
import json  
import paho.mqtt.client as mqtt  
  
# MQTT设置  
MQTT_BROKER = "localhost"  
MQTT_PORT = 1883  
MQTT_TOPIC_IN = "sensors/data"  
MQTT_TOPIC_OUT = "cloud/data"  
  
def on_connect(client, userdata, flags, rc):  
    print(f"Connected with result code {str(rc)}")  
    # 订阅来自终端设备的MQTT主题  
    client.subscribe(MQTT_TOPIC_IN)  
  
def on_message(client, userdata, msg):  
    # 当收到MQTT消息时调用  
    payload = msg.payload.decode()  
    print(f"Received `{payload}` from `{msg.topic}` topic")  
      
    # 假设这里进行简单的数据处理  
    data = json.loads(payload)  
    processed_data = {"processed_temperature": round(data["temperature"], 1), "processed_humidity": round(data["humidity"], 1)}  
      
    # 发送处理后的数据到云端  
    send_data_to_cloud(client, processed_data)  
  
def send_data_to_cloud(client, data):  
    payload = json.dumps(data)  
    client.publish(MQTT_TOPIC_OUT, payload)  
  
# 创建MQTT客户端实例  
client = mqtt.Client()  
client.on_connect = on_connect  
client.on_message = on_message  
  
# 连接到MQTT代理  
client.connect(MQTT_BROKER, MQTT_PORT, 60)  
  
# 保持连接，接收消息  
client.loop_forever()



# cloud_service.py  
import json  
import paho.mqtt.client as mqtt  
  
# MQTT设置  
MQTT_BROKER = "localhost"  # 在实际部署中，这将是MQTT服务器的地址  
MQTT_PORT = 1883  
MQTT_TOPIC = "cloud/data"  
  
def on_connect(client, userdata, flags, rc):  
    print(f"Cloud service connected with result code {str(rc)}")  
    # 订阅来自边缘节点的MQTT主题  
    client.subscribe(MQTT_TOPIC)  
  
def on_message(client, userdata, msg):  
    # 当收到MQTT消息时调用  
    payload = msg.payload.decode()  
    print(f"Cloud service received `{payload}` from `{msg.topic}` topic")  
      
    # 在这里可以添加数据处理或存储的逻辑  
    data = json.loads(payload)  
    # 假设我们只是简单地打印数据  
    print("Processed data:", data)  
  
# 创建MQTT客户端实例  
client = mqtt.Client()  
client.on_connect = on_connect  
client.on_message = on_message  
  
# 连接到MQTT代理  
client.connect(MQTT_BROKER, MQTT_PORT, 60)  
  
# 保持连接，接收消息  
client.loop_forever()